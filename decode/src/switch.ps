%!PS-Adobe-3.0
%%Pages: 9
%%EndComments
%%BeginProlog
/switch { % x y on context
    begin [/on /y /x] dup length dict begin { exch def } forall
        /r w 2 div def
        /ll { x y } def
        /lr { x w add y } def
        /ul { x y h add } def
        /ur { x w add y h add } def
        gsave 
        newpath
        x r add y on { h r sub add  } { r add } ifelse r 0 360 arc
        fill-color setgray
        fill
        newpath
        x y r add moveto
        ll lr r arct
        lr ur r arct
        ur ul r arct
        ul ll r arct
        closepath
        stroke-color setgray
        stroke
        grestore
    end end
} def

/switches { % x y [ons] context
    dup begin [/context /ons /y /x] dup length dict begin { exch def } forall
        /dx w s add def
        0 1 ons length 1 sub {
            /i exch def
            x dx i mul add y ons i get context switch
        } for
    end end
} def

/box { % x y context
    begin [/y /x] dup length dict begin { exch def } forall
        gsave
        newpath
        x y moveto
        side 0 rlineto
        0 side rlineto
        side neg 0 rlineto 
        closepath
        stroke-color setgray
        stroke
        grestore
    end end
} def

/boxed-switches { % x y [ons] context
   dup begin [/context /ons /y /x] dup length dict begin { exch def } forall
        /dx side w s add ons length mul s sub sub 2 div def
        /dy side h sub 2 div def
        x y context box
        x dx add y dy add ons context switches
    end end
} def

/grid { % x y n context
    dup begin [/context /n /y /x] dup length dict begin { exch def } forall
        0 1 n n mul 1 sub {
            /i exch def
            /ix i n mod def
            /iy i n idiv def
            x ix side mul add y iy side mul add
            [
                i
                n { dup 2 mod 0 eq exch 2 idiv } repeat
                pop
            ] 
            context boxed-switches
        } for
    end end
} def


/blind { % x y blind context
    begin [/blind /y /x] dup length dict begin { exch def } forall 
        gsave
        newpath
        x y moveto
        side 0 rlineto
        0 side rlineto
        side neg 0 rlineto
        closepath
        blind {
            gsave
            stroke-color setgray
            fill
            grestore
        } if
        stroke-color setgray
        stroke
        grestore
    end end
} def

/mask { % x y n [blinds] context
    dup begin [/context /blinds /n /y /x] dup length dict begin { exch def } forall
        0 1 blinds length 1 sub {
            /i exch def
            /ix i n mod def
            /iy i n idiv def
            x ix side mul add y iy side mul add blinds i get context blind
        } for
    end end
} def

/name { % x y n id index context
    begin [/index /id /n /y /x] dup length dict begin { exch def } forall
        gsave
        x index side mul add y n side mul add baseline add moveto
        font-name findfont font-size scalefont setfont
        id show
        grestore
    end end
} def

/named-mask { % x y n [blinds] id index context
    dup begin [/context /index /id /blinds /n /y /x] dup length dict begin { exch def } forall
        x y n blinds context mask
        x y n id index context name
    end end
} def

/negate { % [blinds]
    [ exch {
        not
    } forall
    ]
} def

%%EndProlog
%%BeginSetup
/page-width 210 def
/page-height 297 def

/n 4 def
/outer-offset 10 def
/side page-width outer-offset sub n div def
/inner-offset 5 def
/h side inner-offset sub def
/s 3 def
/w side inner-offset sub n 1 sub s mul sub n div def
/grid-x outer-offset 2 div def
/grid-y page-height n side mul sub 2 div def


/context <<
    /w w 
    /h h 
    /s s 
    /side side 
    /fill-color 0.60 
    /stroke-color 0
    /baseline 5
    /font-name /Helvetica
    /font-size 12
>> def

/A [
    true true true true
    true true true true
    false false false false
    false false false false
]
def

/O [
    true true true true
    false false false false
    true true true true
    false false false false
] def

/a [
    true true false false
    true true false false
    true true false false
    true true false false
] def

/minus [
    true false true false
    true false true false
    true false true false
    true false true false
] def
%%EndSetup
%%Page: Grid 1
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n context grid

showpage

clean-slate restore
%%Page: Mask-A 2
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n A (A) 0
context named-mask

showpage

clean-slate restore
%%Page: Mask-B 3
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n A negate (B) 0
context named-mask

showpage

clean-slate restore
%%Page: Mask-0 4
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n O (0) 1
context named-mask

showpage

clean-slate restore
%%Page: Mask-1 5
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n O negate (1) 1
context named-mask

showpage

clean-slate restore
%%Page: Mask-a 6
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n a (a) 2
context named-mask

showpage

clean-slate restore
%%Page: Mask-b 7
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n a negate (b) 2
context named-mask

showpage

clean-slate restore
%%Page: Mask-minus 8
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n minus (-) 3
context named-mask

showpage

clean-slate restore
%%Page: Mask-plus 9
save /clean-slate exch def

72 25.4 div dup scale

grid-x grid-y n minus negate (+) 3
context named-mask

showpage

clean-slate restore
%%Trailer
%%EOF